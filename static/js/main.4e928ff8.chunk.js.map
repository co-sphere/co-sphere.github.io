{"version":3,"sources":["components/loginScreen.js","components/register.js","App.js","serviceWorker.js","index.js"],"names":["loginScreen","state","username","password","onChange","bind","onSubmit","e","this","setState","target","name","value","window","alert","login","React","Component","id","type","placeholder","className","onclick","to","register","firstName","lastName","email","console","log","firstname","lastname","method","action","assign","App","path","exact","component","LoginScreen","Register","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4e928ff8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../componentStyles/loginScreen.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class loginScreen extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  register(){\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    const user = {\r\n      username: this.state.username,\r\n      password: this.state.password,\r\n    };\r\n    window.alert(\"Hello\");\r\n\r\n    // login(user).then((res) => {\r\n    //   if (res) {\r\n    //     // this.props.history.push(\"/home\");\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  render() {\r\n    return login();\r\n  }\r\n}\r\n\r\nconst login = () => {\r\n  return (\r\n    <div id=\"login\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"username\"\r\n        id=\"username\"\r\n        placeholder=\"Username\"\r\n        className=\"credentials\"\r\n      ></input>\r\n      <input\r\n        type=\"password\"\r\n        name=\"password\"\r\n        id=\"password\"\r\n        placeholder=\"Password\"\r\n        className=\"credentials\"\r\n      ></input>\r\n      <div id=\"buttons\">\r\n        <div id=\"login-button\" onclick={() => this.onSubmit()}>\r\n          Log in\r\n        </div>\r\n        <Link to = \"/register\" id=\"register-button\">\r\n          Register\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"../componentStyles/register.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class register extends React.Component {\r\n  constructor(){\r\n      super()\r\n      this.state = {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\", \r\n        username: \"\",\r\n        password: \"\"\r\n      }\r\n  }\r\n\r\nassign(e){\r\n  if(e.target.name === \"first-name\"){\r\n    console.log(\"change\")\r\n    this.setState({firstName: e.target.value})\r\n  }\r\n  if(e.target.name === \"last-name\"){\r\n    this.setState({lastName: e.target.value})\r\n  }\r\n  if(e.target.name === \"email\"){\r\n    this.setState({email: e.target.value})\r\n  }\r\n  if(e.target.name === \"username\"){\r\n    this.setState({username: e.target.value})\r\n  }\r\n  if(e.target.name === \"password\"){\r\n    this.setState({password: e.target.value})\r\n  }\r\n}\r\n\r\n  onSubmit(e){\r\n    const user = {\r\n      firstname: this.state.firstname,\r\n      lastname: this.state.lastname,\r\n      email: this.state.email,\r\n      username: this.state.username,\r\n      password: this.state.password,\r\n    }\r\n    console.log(\"Submitted\")\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"view\">\r\n        <div id=\"join-text\">Join</div>\r\n        <form id=\"register-box\" method = \"POST\" action = \"/user/register\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"first-name\"\r\n            id=\"first-name\"\r\n            placeholder=\"First Name\"\r\n            className=\"user-info\"\r\n            onChange = {this.assign.bind(this)}\r\n          ></input>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last-name\"\r\n            id=\"last-name\"\r\n            placeholder=\"Last Name\"\r\n            className=\"user-info\"\r\n            onChange = {this.assign.bind(this)}\r\n          ></input>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            placeholder=\"Email\"\r\n            className=\"user-info\"\r\n            onChange = {this.assign.bind(this)}\r\n          ></input>\r\n          <input\r\n            type=\"text\"\r\n            name=\"username\"\r\n            id=\"username\"\r\n            placeholder=\"Username\"\r\n            className=\"user-info\"\r\n            onChange = {this.assign.bind(this)}\r\n          ></input>\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            id=\"password\"\r\n            placeholder=\"Password\"\r\n            className=\"user-info\"\r\n            onChange = {this.assign.bind(this)}\r\n          ></input>\r\n          <input type = \"submit\" id=\"submit-registration\"></input>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\n","import React from \"react\";\nimport LoginScreen from \"./components/loginScreen.js\";\nimport Register from \"./components/register.js\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" exact component={LoginScreen} />\n      <Route path=\"/register\" exact component = {Register} />\n      {/* <Route path=\"/create\" component={CreateUser} /> */}\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}